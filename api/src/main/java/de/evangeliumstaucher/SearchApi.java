/*
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.evangeliumstaucher;

import de.evangeliumstaucher.invoker.ApiCallback;
import de.evangeliumstaucher.invoker.ApiClient;
import de.evangeliumstaucher.invoker.ApiException;
import de.evangeliumstaucher.invoker.ApiResponse;
import de.evangeliumstaucher.invoker.Configuration;
import de.evangeliumstaucher.invoker.Pair;
import de.evangeliumstaucher.invoker.ProgressRequestBody;
import de.evangeliumstaucher.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.evangeliumstaucher.model.InlineResponse20011;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchBible
     * @param bibleId Id of Bible to search (required)
     * @param query Search keywords or passage reference.  Supported wildcards are * and ?.   The * wildcard matches any character sequence (e.g. searching for \&quot;wo*d\&quot; finds text such as \&quot;word\&quot;, \&quot;world\&quot;, and \&quot;worshipped\&quot;).   The ? wildcard matches any matches any single character (e.g. searching for \&quot;l?ve\&quot; finds text such as \&quot;live\&quot; and \&quot;love\&quot;).  (optional)
     * @param limit Integer limit for how many matching results to return. Default is 10. (optional)
     * @param offset Offset for search results. Used to paginate results (optional)
     * @param sort Sort order of results.  Supported values are &#x60;relevance&#x60; (default), &#x60;canonical&#x60; and &#x60;reverse-canonical&#x60; (optional, default to relevance)
     * @param range One or more, comma seperated, passage ids (book, chapter, verse) which the search will be limited to.  (i.e. gen.1,gen.5 or gen-num or gen.1.1-gen.3.5)  (optional)
     * @param fuzziness Sets the fuzziness of a search to account for misspellings. Values can be 0, 1, 2, or AUTO. Defaults to AUTO which varies depending on the  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBibleCall(String bibleId, String query, Integer limit, Integer offset, String sort, String range, String fuzziness, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/search"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (fuzziness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuzziness", fuzziness));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBibleValidateBeforeCall(String bibleId, String query, Integer limit, Integer offset, String sort, String range, String fuzziness, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling searchBible(Async)");
        }
        

        okhttp3.Call localVarCall = searchBibleCall(bibleId, query, limit, offset, sort, range, fuzziness, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets search results for a given &#x60;bibleId&#x60; and query string.  Searches will match all verses with the list of keywords provided in the query string. Order of the keywords does not matter. However all keywords must be present in a verse for it to be considered a match. The total number of results returned from a search can be limited by populating the &#x60;limit&#x60; attribute in the query string with a non-negative integer value.  If no limit value is provide a default of 10 is used. &#x60;offset&#x60; can be used to traverse paginated results.  So for example if you are using the default &#x60;limit&#x60; of 10, using an &#x60;offset&#x60; of 10 will return the second page of results, namely results 11-20. The &#x60;text&#x60; property of each verse object contains only the verse text.  It does not contain footnote references. However, those can be queried directly using the &#x60;/bibles/{bibleId}/verses/{verseId}&#x60; endpoint. 
     * @param bibleId Id of Bible to search (required)
     * @param query Search keywords or passage reference.  Supported wildcards are * and ?.   The * wildcard matches any character sequence (e.g. searching for \&quot;wo*d\&quot; finds text such as \&quot;word\&quot;, \&quot;world\&quot;, and \&quot;worshipped\&quot;).   The ? wildcard matches any matches any single character (e.g. searching for \&quot;l?ve\&quot; finds text such as \&quot;live\&quot; and \&quot;love\&quot;).  (optional)
     * @param limit Integer limit for how many matching results to return. Default is 10. (optional)
     * @param offset Offset for search results. Used to paginate results (optional)
     * @param sort Sort order of results.  Supported values are &#x60;relevance&#x60; (default), &#x60;canonical&#x60; and &#x60;reverse-canonical&#x60; (optional, default to relevance)
     * @param range One or more, comma seperated, passage ids (book, chapter, verse) which the search will be limited to.  (i.e. gen.1,gen.5 or gen-num or gen.1.1-gen.3.5)  (optional)
     * @param fuzziness Sets the fuzziness of a search to account for misspellings. Values can be 0, 1, 2, or AUTO. Defaults to AUTO which varies depending on the  (optional)
     * @return InlineResponse20011
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20011 searchBible(String bibleId, String query, Integer limit, Integer offset, String sort, String range, String fuzziness) throws ApiException {
        ApiResponse<InlineResponse20011> localVarResp = searchBibleWithHttpInfo(bibleId, query, limit, offset, sort, range, fuzziness);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets search results for a given &#x60;bibleId&#x60; and query string.  Searches will match all verses with the list of keywords provided in the query string. Order of the keywords does not matter. However all keywords must be present in a verse for it to be considered a match. The total number of results returned from a search can be limited by populating the &#x60;limit&#x60; attribute in the query string with a non-negative integer value.  If no limit value is provide a default of 10 is used. &#x60;offset&#x60; can be used to traverse paginated results.  So for example if you are using the default &#x60;limit&#x60; of 10, using an &#x60;offset&#x60; of 10 will return the second page of results, namely results 11-20. The &#x60;text&#x60; property of each verse object contains only the verse text.  It does not contain footnote references. However, those can be queried directly using the &#x60;/bibles/{bibleId}/verses/{verseId}&#x60; endpoint. 
     * @param bibleId Id of Bible to search (required)
     * @param query Search keywords or passage reference.  Supported wildcards are * and ?.   The * wildcard matches any character sequence (e.g. searching for \&quot;wo*d\&quot; finds text such as \&quot;word\&quot;, \&quot;world\&quot;, and \&quot;worshipped\&quot;).   The ? wildcard matches any matches any single character (e.g. searching for \&quot;l?ve\&quot; finds text such as \&quot;live\&quot; and \&quot;love\&quot;).  (optional)
     * @param limit Integer limit for how many matching results to return. Default is 10. (optional)
     * @param offset Offset for search results. Used to paginate results (optional)
     * @param sort Sort order of results.  Supported values are &#x60;relevance&#x60; (default), &#x60;canonical&#x60; and &#x60;reverse-canonical&#x60; (optional, default to relevance)
     * @param range One or more, comma seperated, passage ids (book, chapter, verse) which the search will be limited to.  (i.e. gen.1,gen.5 or gen-num or gen.1.1-gen.3.5)  (optional)
     * @param fuzziness Sets the fuzziness of a search to account for misspellings. Values can be 0, 1, 2, or AUTO. Defaults to AUTO which varies depending on the  (optional)
     * @return ApiResponse&lt;InlineResponse20011&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20011> searchBibleWithHttpInfo(String bibleId, String query, Integer limit, Integer offset, String sort, String range, String fuzziness) throws ApiException {
        okhttp3.Call localVarCall = searchBibleValidateBeforeCall(bibleId, query, limit, offset, sort, range, fuzziness, null);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets search results for a given &#x60;bibleId&#x60; and query string.  Searches will match all verses with the list of keywords provided in the query string. Order of the keywords does not matter. However all keywords must be present in a verse for it to be considered a match. The total number of results returned from a search can be limited by populating the &#x60;limit&#x60; attribute in the query string with a non-negative integer value.  If no limit value is provide a default of 10 is used. &#x60;offset&#x60; can be used to traverse paginated results.  So for example if you are using the default &#x60;limit&#x60; of 10, using an &#x60;offset&#x60; of 10 will return the second page of results, namely results 11-20. The &#x60;text&#x60; property of each verse object contains only the verse text.  It does not contain footnote references. However, those can be queried directly using the &#x60;/bibles/{bibleId}/verses/{verseId}&#x60; endpoint. 
     * @param bibleId Id of Bible to search (required)
     * @param query Search keywords or passage reference.  Supported wildcards are * and ?.   The * wildcard matches any character sequence (e.g. searching for \&quot;wo*d\&quot; finds text such as \&quot;word\&quot;, \&quot;world\&quot;, and \&quot;worshipped\&quot;).   The ? wildcard matches any matches any single character (e.g. searching for \&quot;l?ve\&quot; finds text such as \&quot;live\&quot; and \&quot;love\&quot;).  (optional)
     * @param limit Integer limit for how many matching results to return. Default is 10. (optional)
     * @param offset Offset for search results. Used to paginate results (optional)
     * @param sort Sort order of results.  Supported values are &#x60;relevance&#x60; (default), &#x60;canonical&#x60; and &#x60;reverse-canonical&#x60; (optional, default to relevance)
     * @param range One or more, comma seperated, passage ids (book, chapter, verse) which the search will be limited to.  (i.e. gen.1,gen.5 or gen-num or gen.1.1-gen.3.5)  (optional)
     * @param fuzziness Sets the fuzziness of a search to account for misspellings. Values can be 0, 1, 2, or AUTO. Defaults to AUTO which varies depending on the  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchBibleAsync(String bibleId, String query, Integer limit, Integer offset, String sort, String range, String fuzziness, final ApiCallback<InlineResponse20011> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBibleValidateBeforeCall(bibleId, query, limit, offset, sort, range, fuzziness, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
