/*
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.evangeliumstaucher;

import de.evangeliumstaucher.invoker.ApiCallback;
import de.evangeliumstaucher.invoker.ApiClient;
import de.evangeliumstaucher.invoker.ApiException;
import de.evangeliumstaucher.invoker.ApiResponse;
import de.evangeliumstaucher.invoker.Configuration;
import de.evangeliumstaucher.invoker.Pair;
import de.evangeliumstaucher.invoker.ProgressRequestBody;
import de.evangeliumstaucher.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.evangeliumstaucher.model.InlineResponse20013;
import de.evangeliumstaucher.model.InlineResponse2004;
import de.evangeliumstaucher.model.InlineResponse2005;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChaptersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChaptersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChaptersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAudioChapter
     * @param audioBibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioChapterCall(String audioBibleId, String chapterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audio-bibles/{audioBibleId}/chapters/{chapterId}"
            .replaceAll("\\{" + "audioBibleId" + "\\}", localVarApiClient.escapeString(audioBibleId.toString()))
            .replaceAll("\\{" + "chapterId" + "\\}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioChapterValidateBeforeCall(String audioBibleId, String chapterId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audioBibleId' is set
        if (audioBibleId == null) {
            throw new ApiException("Missing the required parameter 'audioBibleId' when calling getAudioChapter(Async)");
        }
        
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getAudioChapter(Async)");
        }
        

        okhttp3.Call localVarCall = getAudioChapterCall(audioBibleId, chapterId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;audioBibleId&#x60; and &#x60;chapterId&#x60;. This AudioChapter object also includes an &#x60;resourceUrl&#x60; property with a HTTP URL to the mp3 audio resource for the chapter.  The &#x60;resourceUrl&#x60; is unique per request and expires in XX minutes.  The &#x60;expiresAt&#x60; property provides the Unix time value of &#x60;resourceUrl&#x60; expiration. 
     * @param audioBibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @return InlineResponse20013
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse20013 getAudioChapter(String audioBibleId, String chapterId) throws ApiException {
        ApiResponse<InlineResponse20013> localVarResp = getAudioChapterWithHttpInfo(audioBibleId, chapterId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;audioBibleId&#x60; and &#x60;chapterId&#x60;. This AudioChapter object also includes an &#x60;resourceUrl&#x60; property with a HTTP URL to the mp3 audio resource for the chapter.  The &#x60;resourceUrl&#x60; is unique per request and expires in XX minutes.  The &#x60;expiresAt&#x60; property provides the Unix time value of &#x60;resourceUrl&#x60; expiration. 
     * @param audioBibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @return ApiResponse&lt;InlineResponse20013&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse20013> getAudioChapterWithHttpInfo(String audioBibleId, String chapterId) throws ApiException {
        okhttp3.Call localVarCall = getAudioChapterValidateBeforeCall(audioBibleId, chapterId, null);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;audioBibleId&#x60; and &#x60;chapterId&#x60;. This AudioChapter object also includes an &#x60;resourceUrl&#x60; property with a HTTP URL to the mp3 audio resource for the chapter.  The &#x60;resourceUrl&#x60; is unique per request and expires in XX minutes.  The &#x60;expiresAt&#x60; property provides the Unix time value of &#x60;resourceUrl&#x60; expiration. 
     * @param audioBibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioChapterAsync(String audioBibleId, String chapterId, final ApiCallback<InlineResponse20013> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioChapterValidateBeforeCall(audioBibleId, chapterId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse20013>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudioChapters
     * @param audioBibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioChaptersCall(String audioBibleId, String bookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audio-bibles/{audioBibleId}/books/{bookId}/chapters"
            .replaceAll("\\{" + "audioBibleId" + "\\}", localVarApiClient.escapeString(audioBibleId.toString()))
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudioChaptersValidateBeforeCall(String audioBibleId, String bookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audioBibleId' is set
        if (audioBibleId == null) {
            throw new ApiException("Missing the required parameter 'audioBibleId' when calling getAudioChapters(Async)");
        }
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling getAudioChapters(Async)");
        }
        

        okhttp3.Call localVarCall = getAudioChaptersCall(audioBibleId, bookId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;audioBibleId&#x60; and &#x60;bookId&#x60; 
     * @param audioBibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 getAudioChapters(String audioBibleId, String bookId) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = getAudioChaptersWithHttpInfo(audioBibleId, bookId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;audioBibleId&#x60; and &#x60;bookId&#x60; 
     * @param audioBibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> getAudioChaptersWithHttpInfo(String audioBibleId, String bookId) throws ApiException {
        okhttp3.Call localVarCall = getAudioChaptersValidateBeforeCall(audioBibleId, bookId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;audioBibleId&#x60; and &#x60;bookId&#x60; 
     * @param audioBibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudioChaptersAsync(String audioBibleId, String bookId, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudioChaptersValidateBeforeCall(audioBibleId, bookId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChapter
     * @param bibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChapterCall(String bibleId, String chapterId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/chapters/{chapterId}"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()))
            .replaceAll("\\{" + "chapterId" + "\\}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content-type", contentType));
        }

        if (includeNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-notes", includeNotes));
        }

        if (includeTitles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-titles", includeTitles));
        }

        if (includeChapterNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-chapter-numbers", includeChapterNumbers));
        }

        if (includeVerseNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-verse-numbers", includeVerseNumbers));
        }

        if (includeVerseSpans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-verse-spans", includeVerseSpans));
        }

        if (parallels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parallels", parallels));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterValidateBeforeCall(String bibleId, String chapterId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling getChapter(Async)");
        }
        
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getChapter(Async)");
        }
        

        okhttp3.Call localVarCall = getChapterCall(bibleId, chapterId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60;. This Chapter object also includes an &#x60;content&#x60; property with all verses for the Chapter. 
     * @param bibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2005 getChapter(String bibleId, String chapterId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels) throws ApiException {
        ApiResponse<InlineResponse2005> localVarResp = getChapterWithHttpInfo(bibleId, chapterId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60;. This Chapter object also includes an &#x60;content&#x60; property with all verses for the Chapter. 
     * @param bibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2005> getChapterWithHttpInfo(String bibleId, String chapterId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels) throws ApiException {
        okhttp3.Call localVarCall = getChapterValidateBeforeCall(bibleId, chapterId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single &#x60;Chapter&#x60; object for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60;. This Chapter object also includes an &#x60;content&#x60; property with all verses for the Chapter. 
     * @param bibleId Id of Bible whose Chapter to fetch (required)
     * @param chapterId Id of the Chapter to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chapter not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChapterAsync(String bibleId, String chapterId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback<InlineResponse2005> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterValidateBeforeCall(bibleId, chapterId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChapters
     * @param bibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChaptersCall(String bibleId, String bookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/books/{bookId}/chapters"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()))
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChaptersValidateBeforeCall(String bibleId, String bookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling getChapters(Async)");
        }
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling getChapters(Async)");
        }
        

        okhttp3.Call localVarCall = getChaptersCall(bibleId, bookId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2004 getChapters(String bibleId, String bookId) throws ApiException {
        ApiResponse<InlineResponse2004> localVarResp = getChaptersWithHttpInfo(bibleId, bookId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2004> getChaptersWithHttpInfo(String bibleId, String bookId) throws ApiException {
        okhttp3.Call localVarCall = getChaptersValidateBeforeCall(bibleId, bookId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an array of &#x60;Chapter&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Chapters to fetch (required)
     * @param bookId Id of the Book whose Chapters to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Chapters for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChaptersAsync(String bibleId, String bookId, final ApiCallback<InlineResponse2004> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChaptersValidateBeforeCall(bibleId, bookId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
