/*
 * API.Bible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.evangeliumstaucher;

import de.evangeliumstaucher.invoker.ApiCallback;
import de.evangeliumstaucher.invoker.ApiClient;
import de.evangeliumstaucher.invoker.ApiException;
import de.evangeliumstaucher.invoker.ApiResponse;
import de.evangeliumstaucher.invoker.Configuration;
import de.evangeliumstaucher.invoker.Pair;
import de.evangeliumstaucher.invoker.ProgressRequestBody;
import de.evangeliumstaucher.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import de.evangeliumstaucher.model.InlineResponse2007;
import de.evangeliumstaucher.model.InlineResponse2008;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBookSections
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param bookId Id of the Book whose Sections to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookSectionsCall(String bibleId, String bookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/books/{bookId}/sections"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()))
            .replaceAll("\\{" + "bookId" + "\\}", localVarApiClient.escapeString(bookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBookSectionsValidateBeforeCall(String bibleId, String bookId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling getBookSections(Async)");
        }
        
        // verify the required parameter 'bookId' is set
        if (bookId == null) {
            throw new ApiException("Missing the required parameter 'bookId' when calling getBookSections(Async)");
        }
        

        okhttp3.Call localVarCall = getBookSectionsCall(bibleId, bookId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param bookId Id of the Book whose Sections to fetch (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2007 getBookSections(String bibleId, String bookId) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp = getBookSectionsWithHttpInfo(bibleId, bookId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param bookId Id of the Book whose Sections to fetch (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2007> getBookSectionsWithHttpInfo(String bibleId, String bookId) throws ApiException {
        okhttp3.Call localVarCall = getBookSectionsValidateBeforeCall(bibleId, bookId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;bookId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param bookId Id of the Book whose Sections to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBookSectionsAsync(String bibleId, String bookId, final ApiCallback<InlineResponse2007> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBookSectionsValidateBeforeCall(bibleId, bookId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChapterSections
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param chapterId Id of the Chapter whose Sections to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChapterSectionsCall(String bibleId, String chapterId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/chapters/{chapterId}/sections"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()))
            .replaceAll("\\{" + "chapterId" + "\\}", localVarApiClient.escapeString(chapterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChapterSectionsValidateBeforeCall(String bibleId, String chapterId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling getChapterSections(Async)");
        }
        
        // verify the required parameter 'chapterId' is set
        if (chapterId == null) {
            throw new ApiException("Missing the required parameter 'chapterId' when calling getChapterSections(Async)");
        }
        

        okhttp3.Call localVarCall = getChapterSectionsCall(bibleId, chapterId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param chapterId Id of the Chapter whose Sections to fetch (required)
     * @return InlineResponse2007
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2007 getChapterSections(String bibleId, String chapterId) throws ApiException {
        ApiResponse<InlineResponse2007> localVarResp = getChapterSectionsWithHttpInfo(bibleId, chapterId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param chapterId Id of the Chapter whose Sections to fetch (required)
     * @return ApiResponse&lt;InlineResponse2007&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2007> getChapterSectionsWithHttpInfo(String bibleId, String chapterId) throws ApiException {
        okhttp3.Call localVarCall = getChapterSectionsValidateBeforeCall(bibleId, chapterId, null);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an array of &#x60;Section&#x60; objects for a given &#x60;bibleId&#x60; and &#x60;chapterId&#x60; 
     * @param bibleId Id of Bible whose Sections to fetch (required)
     * @param chapterId Id of the Chapter whose Sections to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Book not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChapterSectionsAsync(String bibleId, String chapterId, final ApiCallback<InlineResponse2007> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChapterSectionsValidateBeforeCall(bibleId, chapterId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2007>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSection
     * @param bibleId Id of Bible whose Section to fetch (required)
     * @param sectionId Id of the Section to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSectionCall(String bibleId, String sectionId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bibles/{bibleId}/sections/{sectionId}"
            .replaceAll("\\{" + "bibleId" + "\\}", localVarApiClient.escapeString(bibleId.toString()))
            .replaceAll("\\{" + "sectionId" + "\\}", localVarApiClient.escapeString(sectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content-type", contentType));
        }

        if (includeNotes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-notes", includeNotes));
        }

        if (includeTitles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-titles", includeTitles));
        }

        if (includeChapterNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-chapter-numbers", includeChapterNumbers));
        }

        if (includeVerseNumbers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-verse-numbers", includeVerseNumbers));
        }

        if (includeVerseSpans != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-verse-spans", includeVerseSpans));
        }

        if (parallels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parallels", parallels));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSectionValidateBeforeCall(String bibleId, String sectionId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'bibleId' is set
        if (bibleId == null) {
            throw new ApiException("Missing the required parameter 'bibleId' when calling getSection(Async)");
        }
        
        // verify the required parameter 'sectionId' is set
        if (sectionId == null) {
            throw new ApiException("Missing the required parameter 'sectionId' when calling getSection(Async)");
        }
        

        okhttp3.Call localVarCall = getSectionCall(bibleId, sectionId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, _callback);
        return localVarCall;

    }

    /**
     * 
     * Gets a single &#x60;Section&#x60; object for a given &#x60;bibleId&#x60; and &#x60;sectionId&#x60;. This Section object also includes an &#x60;content&#x60; property with all verses for the Section. 
     * @param bibleId Id of Bible whose Section to fetch (required)
     * @param sectionId Id of the Section to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @return InlineResponse2008
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse2008 getSection(String bibleId, String sectionId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels) throws ApiException {
        ApiResponse<InlineResponse2008> localVarResp = getSectionWithHttpInfo(bibleId, sectionId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single &#x60;Section&#x60; object for a given &#x60;bibleId&#x60; and &#x60;sectionId&#x60;. This Section object also includes an &#x60;content&#x60; property with all verses for the Section. 
     * @param bibleId Id of Bible whose Section to fetch (required)
     * @param sectionId Id of the Section to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @return ApiResponse&lt;InlineResponse2008&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse2008> getSectionWithHttpInfo(String bibleId, String sectionId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels) throws ApiException {
        okhttp3.Call localVarCall = getSectionValidateBeforeCall(bibleId, sectionId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, null);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single &#x60;Section&#x60; object for a given &#x60;bibleId&#x60; and &#x60;sectionId&#x60;. This Section object also includes an &#x60;content&#x60; property with all verses for the Section. 
     * @param bibleId Id of Bible whose Section to fetch (required)
     * @param sectionId Id of the Section to fetch (required)
     * @param contentType Content type to be returned in the content property.  Supported values are &#x60;html&#x60; (default), &#x60;json&#x60; (beta), and &#x60;text&#x60; (beta) (optional, default to html)
     * @param includeNotes Include footnotes in content (optional, default to false)
     * @param includeTitles Include section titles in content (optional, default to true)
     * @param includeChapterNumbers Include chapter numbers in content (optional, default to false)
     * @param includeVerseNumbers Include verse numbers in content. (optional, default to true)
     * @param includeVerseSpans Include spans that wrap verse numbers and verse text for bible content. (optional, default to false)
     * @param parallels Comma delimited list of bibleIds to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID supplied </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for API access.  Missing or Invalid API Token provided. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not authorized to retrieve Sections for this Bible </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Section not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSectionAsync(String bibleId, String sectionId, String contentType, Boolean includeNotes, Boolean includeTitles, Boolean includeChapterNumbers, Boolean includeVerseNumbers, Boolean includeVerseSpans, String parallels, final ApiCallback<InlineResponse2008> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSectionValidateBeforeCall(bibleId, sectionId, contentType, includeNotes, includeTitles, includeChapterNumbers, includeVerseNumbers, includeVerseSpans, parallels, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse2008>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
