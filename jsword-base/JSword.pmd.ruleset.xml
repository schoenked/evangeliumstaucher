<?xml version="1.0"?>

<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="Custom ruleset"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>A fairly global ruleset containing almost everything</description>

    <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
    <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="rulesets/java/basic.xml/OverrideBothEqualsAndHashcode"/>
    <rule ref="rulesets/java/basic.xml/DoubleCheckedLocking"/>
    <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
    <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
    <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
    <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>
    <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
    <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
    <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
    <!-- <rule ref="rulesets/java/basic.xml/AvoidThreadGroup"/> Used correctly in Desktop.java -->
    <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
    <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
    <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
    <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
    <rule ref="rulesets/java/basic.xml/CheckResultSet"/>
    <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
    <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
    <rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
    <!-- <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/> try later -->
    <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
    <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>

    <rule ref="rulesets/java/braces.xml/IfStmtsMustUseBraces"/>
    <rule ref="rulesets/java/braces.xml/WhileLoopsMustUseBraces"/>
    <rule ref="rulesets/java/braces.xml/IfElseStmtsMustUseBraces"/>
    <rule ref="rulesets/java/braces.xml/ForLoopsMustUseBraces"/>

    <rule ref="rulesets/java/clone.xml/ProperCloneImplementation"/>
    <!-- <rule ref="rulesets/java/clone.xml/CloneThrowsCloneNotSupportedException"/> Not very good. -->
    <!-- <rule ref="rulesets/java/clone.xml/CloneMethodMustImplementCloneable"/> Not very good. -->

    <!-- Better handled by other tools -->
    <!-- <rule ref="rulesets/java/codesize.xml/NPathComplexity"/> 1.0.8 -->
    <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveMethodLength"/> 9 reports. -->
    <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveParameterList"/> better handled by CheckStyle -->
    <!-- <rule ref="rulesets/java/codesize.xml/ExcessiveClassLength"/> 5 reports. -->
    <!-- <rule ref="rulesets/java/codesize.xml/CyclomaticComplexity"/> 67 reports, maybe check comments? -->
    <!-- <rule ref="rulesets/java/codesize.xml/ExcessivePublicCount"/> better handled by CheckStyle -->
    <!-- <rule ref="rulesets/java/codesize.xml/TooManyFields"/> better handled by CheckStyle -->
    <!-- <rule ref="rulesets/java/codesize.xml/NcssMethodCount"/> 1.0.8 -->
    <!-- <rule ref="rulesets/java/codesize.xml/NcssTypeCount"/> 1.0.8 -->
    <!-- <rule ref="rulesets/java/codesize.xml/NcssConstructorCount"/> 1.0.8 -->
    <!-- <rule ref="rulesets/java/codesize.xml/TooManyMethods"/> 1.0.8 better handled by CheckStyle -->

    <!-- <rule ref="rulesets/java/comments.xml/CommentRequired"/> too noisy -->
    <!-- <rule ref="rulesets/java/comments.xml/CommentSize"/> bad implementation. Finds all of our license headers. -->
    <!-- <rule ref="rulesets/java/comments.xml/CommentContent"/> doesn't work -->

    <!-- <rule ref="rulesets/java/controversial.xml/UnnecessaryConstructor"/> -->
    <!-- <rule ref="rulesets/java/controversial.xml/NullAssignment"/> 61 reports -->
    <!-- <rule ref="rulesets/java/controversial.xml/OnlyOneReturn"/> 506 reports -->
    <!-- <rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/> try later -->
    <!-- <rule ref="rulesets/java/controversial.xml/AtLeastOneConstructor"/> 142 reports -->
    <rule ref="rulesets/java/controversial.xml/DontImportSun"/>
    <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape"/>
    <!-- <rule ref="rulesets/java/controversial.xml/CallSuperInConstructor"/> 231 reports -->
    <rule ref="rulesets/java/controversial.xml/UnnecessaryParentheses"/>
    <!-- <rule ref="rulesets/java/controversial.xml/DefaultPackage"/> 355 reports -->
    <!-- <rule ref="rulesets/java/controversial.xml/DataflowAnomalyAnalysis"/> 1.0.8 1112 reports -->
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidFinalLocalVariable"/> 1.0.8 21 reports -->
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType"/> 1.0.8 55 reports -->
    <rule ref="rulesets/java/controversial.xml/AvoidUsingVolatile"/>
    <rule ref="rulesets/java/controversial.xml/AvoidUsingNativeCode"/>
    <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
    <rule ref="rulesets/java/controversial.xml/DoNotCallGarbageCollectionExplicitly"/>
    <rule ref="rulesets/java/controversial.xml/OneDeclarationPerLine"/>
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidPrefixingMethodParameters"/> try later  -->
    <!-- <rule ref="rulesets/java/controversial.xml/AvoidLiteralsInIfCondition"/> try later  -->
    <!-- <rule ref="rulesets/java/controversial.xml/UseObjectForClearerAPI"/> try later  -->
    <!-- <rule ref="rulesets/java/controversial.xml/UseConcurrentHashMap"/> try later  -->

    <!-- Better handled by other tools
   <rule ref="rulesets/java/coupling.xml/CouplingBetweenObjectConstantsInInterfaces"/>
   <rule ref="rulesets/java/coupling.xml/ExcessiveImports"/>
   <rule ref="rulesets/java/coupling.xml/LooseCoupling"/>
   <rule ref="rulesets/java/coupling.xml/LoosePackageCoupling"/> 5.0
   <rule ref="rulesets/java/coupling.xml/LawOfDemeter"/> 5.0
   -->

    <rule ref="rulesets/java/design.xml/UseUtilityClass"/>
    <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
    <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/>
    <rule ref="rulesets/java/design.xml/SwitchStmtsShouldHaveDefault"/>
    <!-- <rule ref="rulesets/java/design.xml/AvoidDeeplyNestedIfStmts"/> 14 reports -->
    <rule ref="rulesets/java/design.xml/AvoidReassigningParameters"/>
    <rule ref="rulesets/java/design.xml/SwitchDensity"/>
    <!-- <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod"/> very good idea, buggy implementation -->
    <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>
    <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/>
    <rule ref="rulesets/java/design.xml/CloseResource"/>
    <rule ref="rulesets/java/design.xml/NonStaticInitializer"/>
    <rule ref="rulesets/java/design.xml/DefaultLabelNotLastInSwitchStmt"/>
    <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
    <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
    <rule ref="rulesets/java/design.xml/BadComparison"/>
    <rule ref="rulesets/java/design.xml/EqualsNull"/>
    <!-- <rule ref="rulesets/java/design.xml/ConfusingTernary"/> allow (test ? 1 : 2) -->
    <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
    <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
    <!-- <rule ref="rulesets/java/design.xml/SimpleDateFormatNeedsLocale"/> should use -->
    <!-- <rule ref="rulesets/java/design.xml/ImmutableField"/> 230 reports. -->
    <rule ref="rulesets/java/design.xml/UseLocaleWithCaseConversions"/>
    <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="rulesets/java/design.xml/AssignmentToNonFinalStatic"/>
    <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
    <!-- <rule ref="rulesets/java/design.xml/AvoidSynchronizedAtMethodLevel"/> 109 reports -->
    <rule ref="rulesets/java/design.xml/MissingBreakInSwitch"/>
    <rule ref="rulesets/java/design.xml/UseNotifyAllInsteadOfNotify"/>
    <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
    <rule ref="rulesets/java/design.xml/AbstractClassWithoutAbstractMethod"/>
    <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
    <!-- <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals"/> use on occassion but we do need object equals, too -->
    <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
    <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
    <rule ref="rulesets/java/design.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
    <!-- <rule ref="rulesets/java/design.xml/UncommentedEmptyMethodBody"/> 74 reports -->
    <!-- <rule ref="rulesets/java/design.xml/UncommentedEmptyConstructor"/> 14 reports -->
    <rule ref="rulesets/java/design.xml/ConstantsInInterface"/>
    <!-- <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter"/> 5 reports -->
    <!-- <rule ref="rulesets/java/design.xml/PreserveStackTrace"/> 7 reports -->
    <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
    <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <!-- <rule ref="rulesets/java/design.xml/EmptyMethodInAbstractClassShouldBeAbstract"/> 1.0.8 34 reports poorly implemented. -->
    <!-- <rule ref="rulesets/java/design.xml/SingularField"/> 1.0.8 20 reports -->
    <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull"/>
    <rule ref="rulesets/java/design.xml/AbstractClassWithoutAnyMethod"/>
    <rule ref="rulesets/java/design.xml/TooFewBranchesForASwitchStatement"/>
    <rule ref="rulesets/java/design.xml/LogicInversion"/>
    <rule ref="rulesets/java/design.xml/UseVarargs"/>
    <!-- <rule ref="rulesets/java/design.xml/FieldDeclarationsShouldBeAtStartOfClass"/> JSword puts them at bottom -->
    <!-- <rule ref="rulesets/java/design.xml/GodClass"/> doesn't work  -->
    <rule ref="rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending"/>


    <rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
    <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
    <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyFinallyBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
    <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
    <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
    <!--
      <rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
      <rule ref="rulesets/java/empty.xml/EmptyStatementBlock"/>
      <rule ref="rulesets/java/empty.xml/EmptyStaticInitializer"/>
     -->

    <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer"/>
    <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
    <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
    <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
    <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
    <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>

    <rule ref="rulesets/java/imports.xml/DuplicateImports"/>
    <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
    <rule ref="rulesets/java/imports.xml/UnusedImports"/>
    <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
    <rule ref="rulesets/java/imports.xml/TooManyStaticImports"/>
    <rule ref="rulesets/java/imports.xml/UnnecessaryFullyQualifiedName"/>

    <rule ref="rulesets/java/j2ee.xml/UseProperClassLoader"/>
    <rule ref="rulesets/java/j2ee.xml/MDBAndSessionBeanNamingConvention"/>
    <rule ref="rulesets/java/j2ee.xml/RemoteSessionInterfaceNamingConvention"/>
    <rule ref="rulesets/java/j2ee.xml/LocalInterfaceSessionNamingConvention"/>
    <rule ref="rulesets/java/j2ee.xml/LocalHomeNamingConvention"/>
    <rule ref="rulesets/java/j2ee.xml/RemoteInterfaceNamingConvention"/>
    <!-- <rule ref="rulesets/java/j2ee.xml/DoNotCallSystemExit"/> JSword has command-line apps -->
    <rule ref="rulesets/java/j2ee.xml/StaticEJBFieldShouldBeFinal"/>
    <!-- <rule ref="rulesets/java/j2ee.xml/DoNotUseThreads"/> JSword uses threads -->

    <!-- <rule ref="rulesets/java/javabeans.xml/BeanMembersShouldSerialize"/> 585 reports -->
    <!-- <rule ref="rulesets/java/javabeans.xml/MissingSerialVersionUID"/> Not very good. -->

    <!-- however *test is exempt from coding conventions so these are not run
    <rule ref="rulesets/java/junit.xml/JUnitStaticSuite"/>
    <rule ref="rulesets/java/junit.xml/JUnitSpelling"/>
    <rule ref="rulesets/java/junit.xml/JUnitAssertionsShouldIncludeMessage"/>
    <rule ref="rulesets/java/junit.xml/JUnitTestsShouldIncludeAssert"/>
    <rule ref="rulesets/java/junit.xml/TestClassWithoutTestCases"/>
    <rule ref="rulesets/java/junit.xml/UnnecessaryBooleanAssertion"/>
    <rule ref="rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue"/>
    <rule ref="rulesets/java/junit.xml/UseAssertSameInsteadOfAssertTrue"/>
    <rule ref="rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue"/>
    <rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion"/>
    <rule ref="rulesets/java/junit.xml/JunitTestContainsTooManyAsserts"/>
    <rule ref="rulesets/java/junit.xml/UseAssertTrueInsteadOfAssertEquals"/>
  -->

    <rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging"/>
    <rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger"/>
    <!-- <rule ref="rulesets/java/logging-jakarta-commons.xml/GuardDebugLogging"/> try later.-->
    <!-- <rule ref="rulesets/java/logging-jakarta-commons.xml/GuardLogStatement"/> try later.-->

    <!-- <rule ref="rulesets/java/logging-java.xml/MoreThanOneLogger"/> Not written very well. -->
    <!-- <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal"/> Not very smart. -->
    <!-- <rule ref="rulesets/java/logging-java.xml/SystemPrintln"/> 17 reports in APIExamples. But, way too slow. 5+ minutes.-->
    <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace"/>
    <!-- <rule ref="rulesets/java/logging-java.xml/GuardLogStatementJavaUtil"/> try later -->

    <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList"/>
    <!-- <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/> 1.0.8 1 reports -->
    <!-- <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator"/> 1.0.8 2 reports -->
    <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
    <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
    <!-- <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/> 1.0.8 82 reports -->
    <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
    <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
    <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
    <!-- We don't use JUnit4
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseBeforeAnnotation"/>
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseAfterAnnotation"/>
    <rule ref="rulesets/java/migrating.xml/JUnit4TestShouldUseTestAnnotation"/>
    <rule ref="rulesets/java/migrating.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
    <rule ref="rulesets/java/migrating.xml/JUnitUseExpected"/>
    -->
    <!-- <rule ref="rulesets/java/naming.xml/ShortVariable"/> 702 reports -->
    <!-- <rule ref="rulesets/java/naming.xml/LongVariable"/> 145 reports -->
    <!-- <rule ref="rulesets/java/naming.xml/ShortMethodName"/> 1 report History.go() -->
    <!-- <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/> not very good -->
    <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
    <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
    <!-- <rule ref="rulesets/java/naming.xml/AbstractNaming"/> Reports on JSword enumerations -->
    <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
    <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
    <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
    <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
    <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
    <!-- <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/> implemented poorly -->
    <!-- <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/> implemented poorly -->
    <rule ref="rulesets/java/naming.xml/NoPackage"/>
    <rule ref="rulesets/java/naming.xml/PackageCase"/>
    <rule ref="rulesets/java/naming.xml/MisleadingVariableName"/>
    <!-- <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/> try later  -->
    <!-- <rule ref="rulesets/java/naming.xml/ShortClassName"/> JSword has some 4 letter class names -->
    <rule ref="rulesets/java/naming.xml/GenericsNaming"/>

    <!-- <rule ref="rulesets/java/optimizations.xml/LocalVariableCouldBeFinal"/> 2267 reports! -->
    <!-- <rule ref="rulesets/java/optimizations.xml/MethodArgumentCouldBeFinal"/> 2156 reports! -->
    <!-- <rule ref="rulesets/java/optimizations.xml/AvoidInstantiatingObjectsInLoops"/> 75 reports. -->
    <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
    <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>
    <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>
    <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
    <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
    <!-- <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/> 1 Java 1.5 report -->
    <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
    <rule ref="rulesets/java/optimizations.xml/RedundantFieldInitializer"/>
    <!-- <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/> try later -->

    <rule ref="rulesets/java/strictexception.xml/AvoidCatchingThrowable"/>
    <rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException"/>
    <rule ref="rulesets/java/strictexception.xml/ExceptionAsFlowControl"/>
    <!-- <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>  Should do this or the one below. -->
    <!-- <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes"/> good idea, bad implementation -->
    <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
    <!-- <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException"/> new 3.8 -->
    <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
    <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
    <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
    <!-- <rule ref="rulesets/java/strictexception.xml/AvoidCatchingGenericException"/> This or AvoidCatchingNPE -->
    <!-- <rule ref="rulesets/java/strictexception.xml/AvoidLosingExceptionInformation"/> try later -->

    <!-- <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals"/> 5 reports -->
    <rule ref="rulesets/java/strings.xml/StringInstantiation"/>
    <rule ref="rulesets/java/strings.xml/StringToString"/>
    <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
    <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
    <rule ref="rulesets/java/strings.xml/UseStringBufferLength"/>
    <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
    <rule ref="rulesets/java/strings.xml/ConsecutiveAppendsShouldReuse"/>
    <!-- <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends"/> 1 report -->
    <rule ref="rulesets/java/strings.xml/UseIndexOfChar"/>
    <!-- <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck"/> 1 report, dumb -->
    <!-- <rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration"/> 3 reports -->
    <rule ref="rulesets/java/strings.xml/UselessStringValueOf"/>
    <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar"/>
    <rule ref="rulesets/java/strings.xml/UseEqualsToCompareStrings"/>
    <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>

    <rule ref="rulesets/java/sunsecure.xml/MethodReturnsInternalArray"/>
    <rule ref="rulesets/java/sunsecure.xml/ArrayIsStoredDirectly"/>

    <!-- <rule ref="rulesets/java/typeresolution.xml/LooseCoupling"/> try later  -->
    <rule ref="rulesets/java/typeresolution.xml/CloneMethodMustImplementCloneable"/>
    <rule ref="rulesets/java/typeresolution.xml/UnusedImports"/>
    <rule ref="rulesets/java/typeresolution.xml/SignatureDeclareThrowsException"/>

    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryFinalModifier"/>
    <!-- <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/> buggy -->
    <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
    <rule ref="rulesets/java/unnecessary.xml/UnnecessaryModifier"/>
    <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
    <!-- <rule ref="rulesets/java/unnecessary.xml/UselessParentheses"/> try later  -->

    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
    <rule ref="rulesets/java/unusedcode.xml/UnusedFormalParameter"/>

</ruleset>
