<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <!-- property name="basedir" value="${checkstyle.basedir}"/> -->

    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java"/>

    <!-- Checks for Javadoc Comments. Buggy, when run on tests.
    <module name="JavadocPackage">
      <property name="allowLegacy" value="true"/>
    </module>
     -->
    <module name="NewlineAtEndOfFile"/>
    <module name="Translation"/>
    <module name="FileLength">
        <property name="max" value="2000"/>
    </module>
    <module name="FileTabCharacter"/>
    <!-- Header checks would be good to do, in order to verify that license is present.
    <module name="Header"/>
    <module name="RegexpHeader"/>
    -->
    <!-- module name="RegexpHeader">
      <property
        name="headerFile"
        value="${checkstyle.header.file}"/>
    </module -->
    <module name="UniqueProperties"/>

    <module name="TreeWalker">

        <!-- property name="cacheFile" value="${checkstyle.cache.file}"/> -->

        <!-- Checks for Annotations -->
        <module name="AnnotationLocation"/> <!-- new -->
        <module name="AnnotationUseStyle"/>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="PackageAnnotation"/>
        <module name="SuppressWarnings"/>
        <module name="SuppressWarningsHolder"/> <!-- new -->

        <!-- Checks for Javadoc Comments -->
        <!-- This would be a big change. Very slow.
        <module name="AtclauseOrder"/>
        -->
        <!--  Should do this
        <module name="JavadocMethod">
          <property name="scope" value="public"/>
        </module>
         -->
        <!-- This would be a big change. Very slow.
        <module name="JavadocParagraph"/>
        -->
        <!--  Should do this
        <module name="JavadocStyle">
          <property name="scope" value="public"/>
        </module>
        -->
        <!-- This would be a big change. Very, very slow.
        <module name="JavadocTagContinuationIndentation"/>
        -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S"/>
        </module>
        <!-- This would be a big change
        <module name="JavadocType">
          <property name="scope" value="public"/>
        </module>
        -->
        <!--  Should do this
        <module name="JavadocVariable">
           <property name="scope" value="public"/>
        </module>
        -->
        <!-- Should do this. Very, very slow.
        <module name="NonEmptyAtclauseDescription"/>
         -->
        <module name="SingleLineJavadoc"/>
        <!--  Should do this
        <module name="SummaryJavadoc"/>
        -->
        <!-- The following would need to be configured to be useful.
        <module name="WriteTag"/>
        -->

        <!-- Checks for Naming Conventions -->
        <!-- Would change API
        <module name="AbbreviationAsWordInName"/>
        -->
        <module name="AbstractClassName">
            <property name="format" value="^Abstract.*$"/>
        </module>
        <!-- module name="CatchParameterName"/ -->
        <module name="ClassTypeParameterName"/>
        <!-- Allow "log" and "instance" otherwise only upper case valid variables with _ -->
        <module name="ConstantName">
            <property name="format" value="^(log|instance|([A-Z][A-Z0-9]*(_[A-Z0-9]+)*))$"/>
        </module>
        <module name="InterfaceTypeParameterName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="MethodTypeParameterName"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z]([a-z0-9]{1,13}|[a-z0-9]+tion))*$"/>
        </module>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>

        <!-- Checks for imports -->
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <module name="IllegalImport"/>
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>
        <!-- Would need to be configured to be useful
        <module name="CustomImportOrder"/>
        <module name="ImportControl"/>
        <module name="ImportOrder"/>
        -->

        <!-- Checks for Size Violations -->
        <!--
        <module name="AnonInnerLength">
          <property name="max" value="60"/>
        </module>
        -->
        <!--
        <module name="ExecutableStatementCount">
          <property name="max" value="20"/>
          <property name="tokens" value="CTOR_DEF,METHOD_DEF,INSTANCE_INIT,STATIC_INIT"/>
        </module>
        -->
        <!--
        <module name="LineLength">
          <property name="max" value="256"/>
        </module>
        -->
        <module name="MethodCount">
            <property name="maxTotal" value="100"/>
            <property name="maxPrivate" value="20"/>
            <property name="maxPackage" value="10"/>
            <property name="maxProtected" value="20"/>
            <property name="maxPublic" value="50"/>
        </module>
        <!--
        <module name="MethodLength">
          <property name="tokens" value="METHOD_DEF"/>
          <property name="max" value="300"/>
          <property name="countEmpty" value="false"/>
        </module>

        <module name="MethodLength">
          <property name="tokens" value="CTOR_DEF"/>
          <property name="max" value="500"/>
          <property name="countEmpty" value="false"/>
        </module>
        -->
        <module name="OuterTypeNumber"/>
        <module name="ParameterNumber">
            <property name="max" value="7"/>
            <property name="tokens" value="CTOR_DEF,METHOD_DEF"/>
        </module>

        <!-- Checks for Whitespace -->
        <module name="EmptyForInitializerPad">
            <property name="option" value="space"/>
        </module>
        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad">
            <property name="tokens"
                      value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL"/> <!-- , ENUM_CONSTANT_DEF -->
        </module>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/><!-- ARRAY_INIT, -->
            <property name="allowLineBreaks" value="false"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="false"/>
        </module>
        <module name="OperatorWrap"/>
        <module name="ParenPad">
            <property name="option" value="nospace"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="NL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="TypecastParenPad">
            <property name="option" value="nospace"/>
        </module>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>
        <!-- End of whitespace rules -->

        <!-- Modifier Checks -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>

        <!-- Checks for blocks -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
            <property name="option" value="text"/>
        </module>
        <module name="EmptyCatchBlock"> <!-- new -->
            <property name="commentFormat" value="This is allowed"/>
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="LeftCurly">
            <property name="option" value="nlow"/>
        </module>
        <module name="NeedBraces"/>
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>

        <!-- Checks for Coding problems -->
        <!-- JSword does not require trailing comma on arrays
        <module name="ArrayTrailingComma"/>
        -->
        <!-- We are not ready for this
        <module name="AvoidInlineConditionals"/>
        -->
        <module name="CovariantEquals"/>
        <!-- JSword has its own conventions for declaration order
        <module name="DeclarationOrder"/>
        -->
        <module name="DefaultComesLast"/>
        <!-- module name="DoubleCheckedLocking"/ not in 5.6 -->
        <module name="EmptyStatement"/>
        <module name="EqualsAvoidNull"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough"/>
        <!-- We are not ready for this
        <module name="FinalLocalVariable">
          <property name="tokens" value="VARIABLE_DEF"/>
          <property name="tokens" value="PARAMETER_DEF"/>
        </module>
        -->
        <module name="HiddenField">
            <property name="tokens" value="VARIABLE_DEF"/>
        </module>
        <module name="IllegalCatch"/>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean, java.lang.String"/>
        </module>
        <module name="IllegalThrows"/>
        <!-- Are there any features of Java that are not allowed? Not for JSword.
        <module name="IllegalToken"/>
        -->
        <!-- Example usage
        <module name="IllegalTokenText">
          <property name="tokens" value="STRING_LITERAL"/>
          <property name="format" value="a href"/>
        </module>
        -->
        <module name="IllegalTokenText">
            <property name="tokens" value="NUM_INT,NUM_LONG"/>
            <property name="format" value="^0[^lx]"/>
            <property name="ignoreCase" value="true"/>
        </module>
        <!-- We are not ready for this
        <module name="IllegalType"/>
        -->
        <module name="InnerAssignment"/>
        <!-- JSword uses tables of numbers
        <module name="MagicNumber"/>
        -->
        <!-- We are not ready for this
        <module name="MissingCtor"/>
        -->

        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="10"/>
        </module>
        <module name="MultipleVariableDeclarations"/>
        <module name="NestedForDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="3"/>
        </module>
        <!-- Are there any features of Java that are not allowed? Not for JSword.
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        -->
        <module name="OneStatementPerLine"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageDeclaration"/>
        <module name="ParameterAssignment"/>
        <!-- JSword does not require "this"
        <module name="RequireThis"/>
        -->
        <!-- We are not ready for this
        <module name="ReturnCount">
          <property name="max" value="3"/>
        </module>
        -->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="SuperClone"/>
        <module name="SuperFinalize"/>
        <module name="UnnecessaryParentheses"/>
        <!-- We are not ready for this
        <module name="VariableDeclarationUsageDistance"/>
        -->
        <!-- Buggy
        <module name="RedundantThrows"/>
        -->
        <!--  <module name="JUnitTestCase"/> Removed in 6.2 -->

        <!-- Class Design Checks -->
        <!-- This would be a big change
        <module name="DesignForExtension"/>
        -->
        <module name="FinalClass"/>
        <module name="InterfaceIsType"/>
        <module name="HideUtilityClassConstructor"/>
        <!-- This would be a big change
        <module name="InnerTypeLast"/>
    tried    -->
        <module name="InterfaceIsType"/> <!-- new -->
        <module name="MutableException"/>
        <module name="OneTopLevelClass"/> <!-- new -->
        <!-- We are not ready for this
        <module name="ThrowsCount">
          <property name="max" value="2"/>
        </module>
        -->
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>
        <!-- The ant task cpd does this
        <module name="StrictDuplicateCode"/>
        -->

        <!-- Metrics Checks
        <module name="BooleanExpressionComplexity">
          <property name="max" value="3"/>
        </module>
        <module name="ClassDataAbstractionCoupling">
          <property name="max" value="7"/>
        </module>
        <module name="ClassFanOutComplexity">
          <property name="max" value="20"/>
        </module>
        <module name="CyclomaticComplexity">
          <property name="max" value="10"/>
        </module>
        <module name="NPathComplexity">
          <property name="max" value="200"/>
        </module>
        <module name="JavaNCSS">
          <property name="methodMaximum" value="40"/>
        </module>
        <module name="NPathComplexity">
          <property name="max" value="1000"/>
        </module>
        -->

        <!-- Miscellaneous Checks -->
        <module name="ArrayTypeStyle"/>
        <!--  Too big to tackle now. Slow too.
        <module name="AvoidEscapedUnicodeCharacters">
          <property name="allowEscapesForControlCharacters" value="true"/>
          <property name="allowByTailComment" value="true"/>
          <property name="allowIfAllCharactersEscaped" value="true"/>
          <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        -->
        <!-- Should do.
        <module name="CommentsIndentation"/>
        -->
        <module name="DescendantToken"/>
        <!--
        <module name="FileContentsHolder"/>
        -->
        <!-- This would be a big change
        <module name="FinalParameters"/>
    tried    -->
        <!-- This would be a big change
        <module name="Indentation"/>
    tried    -->
        <module name="OuterTypeFilename"/>
        <module name="TodoComment"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="((public)|(protected))\s+void\s+finalize\(\s*\)"/>
        </module>
        <!-- Check to find trailing whitespace at the end of a line -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="\s$"/>
            <property name="ignoreComments" value="true"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>

        <module name="UncommentedMain">
            <property name="excludedClasses"
                      value="\.(Desktop|APIExamples|XalanProcess|XMLProcess|BibleToOsis|DictToOsis|BibleScope|BookExporter|BookInstaller|BookLookup|StrongsAnalysis|FTPExample|ConfParser|GatherAllReferences|ReadEverything)$"/>
        </module>
        <module name="UpperEll"/>
        <!-- This would be a big change.
        <module name="TrailingComment"/>
    tried    -->

        <!-- Perhaps we should check for the GPL license @author, @id, ...
        <module name="RequiredRegexp"/>
        -->

        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>
    </module>

</module>

